@resource gleanBoard.Resources.Board

<!DOCTYPE html>
<html>
<head>
    <title>gleanBoard</title>
    <link href="/assets/Site.css" rel="stylesheet" type="text/css" />
    <link href="/assets/themes/smoothness/jquery-ui.css" rel="stylesheet" type="text/css" />
    <script src="/Scripts/jquery-1.5.1.min.js" type="text/javascript"></script>
    <script src="/Scripts/jquery-ui-1.8.11.min.js" type="text/javascript"></script>
    <script type='text/javascript' src='/Scripts/jquery.tmpl.js'></script>
    <script type='text/javascript' src='/Scripts/knockout-1.2.1.js'></script>
    <script src="http://github.com/SteveSanderson/knockout/raw/master/build/output/knockout-latest.js"></script>
</head>

<body>
    <div class="page">

        <div id="header">
            <div id="title">
                <img src="/assets/images/logo.gif" alt="Logo" />
            </div>

            <div id="logindisplay">
                <a href="/login">LOGIN</a>
            </div>

            <div id="menucontainer">
                <ul id="menu">
                    <li><a href="/">HOME</a></li>
                    <li><a href="/features">FEATURES</a></li>
                    <li><a href="/demo">DEMO</a></li>
                    <li><a href="/signup">SIGN UP</a></li>
                </ul>
            </div>
        </div>

        <div id="main">

            <script type="text/javascript">
                $(document).ready(function () {

                    function card(id, name, price) {
                        return {
                            Id: id,
                            Name: name
                        };
                    };

                    function lane(id, name, cards) {
                        return {
                            Id: id,
                            Name: name,
                            Cards: ko.observableArray(cards)
                        };
                    };

                    function moveById(ids, fromArray, toArray) {
                        var moved = fromArray.remove(function (p) {
                            return ko.utils.arrayIndexOf(ids, p.Id.toString()) >= 0;
                        });
                        for (var i = 0; i < moved.length; i++)
                            toArray.push(moved[i]);
                    };


                    var viewModel = {
                        owner: "Brian",
                        lanes: ko.observableArray([
                        @foreach (var lane in Resource.Lanes)
                        {
                            <text>new lane("@lane.Id", "@lane.Name",[</text>
                            foreach(var card in lane.Cards)
		                    {
			                    <text>new card("@card.Id","@card.Title"),</text>
		                    }
                            <text>]),</text>
                        }
                        ]),
                        events: ko.observableArray(),
                        newCardTitle: ko.observable("New Card"),
                        newLaneName: ko.observable("New Lane"),
                        addCard: function () {
                            $.post("/card/create",
                             { title: viewModel.newCardTitle, lane: $("#newCardLane").val() },
                             function (data) {
                                viewModel.findLaneById(data.Lane).Cards.push(new card(data.Id, data.Title));
                             })
                        },
                        addLane: function () {
                            $.post("/lane/create",
                             { name: viewModel.newLaneName },
                             function (data) {
                                viewModel.lanes.push(new lane(data.Id, data.Name, []));
                             })
                        },
                        moveLanes: function (ids, from, to) {
                            this.events.push({ id: ids, from: from, to: to });

                            var fromLane;
                            var toLane;
                            for (var i = 0; i < this.lanes().length; i++) {
                                if (this.lanes()[i].Name == from)
                                    fromLane = this.lanes()[i];

                                if (this.lanes()[i].Name == to)
                                    toLane = this.lanes()[i];
                            }

                            moveById(ids, fromLane.Cards, toLane.Cards);
                        },
                        createLanes: function () {
                            $(".connectedSortable").sortable({
                                connectWith: ".connectedSortable",
                                placeholder: "laneCardDrop",
                                dropOnEmpty: true
                            }).disableSelection();
                        },
                        findLaneById: function(id) {
                            for (var i = 0; i < this.lanes().length; i++) {
                                if (this.lanes()[i].Id == id)
                                    return this.lanes()[i];
                            }
                        }
                    };

                    ko.bindingHandlers.onReceiveItem = {
                        init: function (element, valueAccessor, allBindingsAccessor, viewModel) {
                            var callback = valueAccessor();
                            $(element).bind("sortreceive", function (event, ui) {
                                var receivedIds = $.map(ui.item, function (item) {
                                    return $(item).attr("data-id")
                                });
                                callback.call(viewModel, receivedIds, ui.sender.context.id, event.target.id);
                            });
                        }
                    };

                    ko.applyBindings(viewModel);

                });
            </script>
            <h2>Board</h2>

                                                                                                                                                                                                                                                                                                                                                                                                                                    <style type="text/css">
    .container div
    {
        float:left;
    }

    .laneCard
    {
        height:50px;
        border:solid 1px #AAAAAA;
        background-color:#CCCCCC;
        color:#000000;
    }

    .laneCardDrop
    {
        height:50px;
        border:solid 1px #000000;
        background-color:orange;
    }

    .connectedSortable  {
        list-style-type: none; 
        margin: 0; 
        padding: 0; 
        margin-right: 10px; 
        background: #eee; 
        padding: 5px; 
        width: 143px;
        min-height:300px;
    }
    .connectedSortable li {
        margin: 5px; 
        padding: 5px; 
        font-size: 1.2em; 
        width: 120px; 
    }
</style>

            <div class="container" data-bind="template: {name: 'laneTmpl', afterRender: createLanes}">
            </div>
        
            <script type="text/html" id="laneTmpl">
                {{each lanes}}
                <div>
                    ${Name}
                    <ul id="${Name}" class="connectedSortable" data-bind="template: { name: 'cardTmpl', foreach: Cards}, onReceiveItem: moveLanes"></ul>
                </div>
                {{/each}}
            </script>
        
            <script type="text/html" id="cardTmpl">
                <li data-id="${Id}" class="laneCard">${Name}</li>
            </script>
        
            <script type="text/html" id="eventsTmpl">
                <ul>
                    <li>moving ${id} from ${from} to ${to}</li>
                </ul>
            </script>
        
            <div style="clear:both;"></div>

            <div id="events" data-bind="template: {name: 'eventsTmpl', foreach: events}">
            </div>

            <form>

                <label>Title:</label> <input type="text" data-bind="value: newCardTitle" />
                <select id="newCardLane" data-bind="options: lanes, optionsText:'Name', optionsValue:'Id'"></select>
                <button type="button" data-bind="click: addCard">Create New Card</button>

                <br/>
                Name <input type="text" data-bind="value: newLaneName" />
                <button data-bind="click: addLane">Create New Lane</button>

            </form>

        </div>
    </div>
</body>
</html>